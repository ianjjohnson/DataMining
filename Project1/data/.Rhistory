rules.sorted <- sort(rules, by=c("confidence", "support", "lift"))
#Prune association rule set to remove redundant rules
# subset.matrix <- is.subset(rules.sorted, rules.sorted)
# subset.matrix[lower.tri(subset.matrix, diag = TRUE)] <- NA
# redundant <- colSums(subset.matrix, na.rm = TRUE) >= 1
# rules.sorted <- rules.sorted[!redundant]
#Vector used to identify rules as being 'strong' rules for the final classifier
strongRules <- vector('logical', length=length(rules.sorted))
rulesMatchLHS <- is.subset(rules.sorted@lhs, ds.mat)
rulesMatchRHS <- is.subset(rules.sorted@rhs, ds.mat)
#matrix of rules and records which constitute correct and false matches
matches <- rulesMatchLHS & rulesMatchRHS
falseMatches <- rulesMatchLHS & !rulesMatchRHS
#matrix of rules and classification factor to identify how many times the rule correctly identifies the class
casesCovered <- vector('integer', length=length(rules.sorted))
strongRules <- vector('logical', length=length(rules.sorted))
a <- .Call("stage1", length(ds.mat), strongRules, casesCovered, matches, falseMatches, length(rules.sorted), PACKAGE = "arulesCBA")
replace <- .Call("stage2", a, casesCovered, matches, strongRules,  PACKAGE = "arulesCBA")
#initializing variables for stage 3
ruleErrors <- 0
classDistr <- as.integer(rightHand)
covered <- vector('logical', length=length(ds.mat))
covered[1:length(ds.mat)] <- FALSE
defaultClasses <- vector('integer', length=length(rules.sorted))
totalErrors <- vector('integer', length=length(rules.sorted))
.Call("stage3", strongRules, casesCovered, covered, defaultClasses, totalErrors, classDistr, replace, matches, falseMatches, length(levels(rightHand)),  PACKAGE = "arulesCBA")
#save the classifier as only the rules up to the point where we have the lowest total error count
classifier <- rules.sorted[strongRules][1:which.min(totalErrors[strongRules])]
#add a default class to the classifier (the default class from the last rule included in the classifier)
defaultClass <- levels(rightHand)[defaultClasses[strongRules][[which.min(totalErrors[strongRules])]]]
classifier <- list(classifier, defaultClass)
class(classifier) <- "CBA"
return(classifier)
}
CBA <- function(data, class, support = 0.2, confidence = 0.8, verbose=FALSE){
####Preparing data####
if(!is(data, "transactions")){
ds.mat <- as(data, "transactions")
} else { ds.mat <- data }
info <- itemInfo(ds.mat)
classNames <- info[info$variables == class,'labels']
rows <- as.integer(rownames(info[info$variables == class,]))
rightHand <- vector('character', length(ds.mat))
for (i in 1:length(classNames)){
rightHand[ds.mat@data[rows[i],]] <- classNames[i]
}
rightHand <- factor(rightHand)
#Generate and sort association rules
rules <- apriori(ds.mat, parameter = list(minlen = 2, supp = support, conf = confidence), appearance = list(rhs=levels(rightHand), default = "lhs"), control=list(verbose=FALSE))
rules.sorted <- sort(rules, by=c("confidence", "support", "lift"))
#Prune association rule set to remove redundant rules
# subset.matrix <- is.subset(rules.sorted, rules.sorted)
# subset.matrix[lower.tri(subset.matrix, diag = TRUE)] <- NA
# redundant <- colSums(subset.matrix, na.rm = TRUE) >= 1
# rules.sorted <- rules.sorted[!redundant]
#Vector used to identify rules as being 'strong' rules for the final classifier
strongRules <- vector('logical', length=length(rules.sorted))
rulesMatchLHS <- is.subset(rules.sorted@lhs, ds.mat)
rulesMatchRHS <- is.subset(rules.sorted@rhs, ds.mat)
return(rulesMatchLHS)
#matrix of rules and records which constitute correct and false matches
matches <- rulesMatchLHS & rulesMatchRHS
falseMatches <- rulesMatchLHS & !rulesMatchRHS
#matrix of rules and classification factor to identify how many times the rule correctly identifies the class
casesCovered <- vector('integer', length=length(rules.sorted))
strongRules <- vector('logical', length=length(rules.sorted))
a <- .Call("stage1", length(ds.mat), strongRules, casesCovered, matches, falseMatches, length(rules.sorted), PACKAGE = "arulesCBA")
replace <- .Call("stage2", a, casesCovered, matches, strongRules,  PACKAGE = "arulesCBA")
#initializing variables for stage 3
ruleErrors <- 0
classDistr <- as.integer(rightHand)
covered <- vector('logical', length=length(ds.mat))
covered[1:length(ds.mat)] <- FALSE
defaultClasses <- vector('integer', length=length(rules.sorted))
totalErrors <- vector('integer', length=length(rules.sorted))
.Call("stage3", strongRules, casesCovered, covered, defaultClasses, totalErrors, classDistr, replace, matches, falseMatches, length(levels(rightHand)),  PACKAGE = "arulesCBA")
#save the classifier as only the rules up to the point where we have the lowest total error count
classifier <- rules.sorted[strongRules][1:which.min(totalErrors[strongRules])]
#add a default class to the classifier (the default class from the last rule included in the classifier)
defaultClass <- levels(rightHand)[defaultClasses[strongRules][[which.min(totalErrors[strongRules])]]]
classifier <- list(classifier, defaultClass)
class(classifier) <- "CBA"
return(classifier)
}
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
CBA <- function(data, class, support = 0.2, confidence = 0.8, verbose=FALSE){
####Preparing data####
if(!is(data, "transactions")){
ds.mat <- as(data, "transactions")
} else { ds.mat <- data }
info <- itemInfo(ds.mat)
classNames <- info[info$variables == class,'labels']
rows <- as.integer(rownames(info[info$variables == class,]))
rightHand <- vector('character', length(ds.mat))
for (i in 1:length(classNames)){
rightHand[ds.mat@data[rows[i],]] <- classNames[i]
}
rightHand <- factor(rightHand)
#Generate and sort association rules
rules <- apriori(ds.mat, parameter = list(minlen = 2, supp = support, conf = confidence), appearance = list(rhs=levels(rightHand), default = "lhs"), control=list(verbose=FALSE))
rules.sorted <- sort(rules, by=c("confidence", "support", "lift"))
#Prune association rule set to remove redundant rules
# subset.matrix <- is.subset(rules.sorted, rules.sorted)
# subset.matrix[lower.tri(subset.matrix, diag = TRUE)] <- NA
# redundant <- colSums(subset.matrix, na.rm = TRUE) >= 1
# rules.sorted <- rules.sorted[!redundant]
#Vector used to identify rules as being 'strong' rules for the final classifier
strongRules <- vector('logical', length=length(rules.sorted))
rulesMatchLHS <- s.subset(rules.sorted@lhs, ds.mat, sparse = TRUE)
rulesMatchRHS <- s.subset(rules.sorted@rhs, ds.mat, sparse = TRUE)
return(rulesMatchLHS)
#matrix of rules and records which constitute correct and false matches
matches <- rulesMatchLHS & rulesMatchRHS
falseMatches <- rulesMatchLHS & !rulesMatchRHS
#matrix of rules and classification factor to identify how many times the rule correctly identifies the class
casesCovered <- vector('integer', length=length(rules.sorted))
strongRules <- vector('logical', length=length(rules.sorted))
a <- .Call("stage1", length(ds.mat), strongRules, casesCovered, matches, falseMatches, length(rules.sorted), PACKAGE = "arulesCBA")
replace <- .Call("stage2", a, casesCovered, matches, strongRules,  PACKAGE = "arulesCBA")
#initializing variables for stage 3
ruleErrors <- 0
classDistr <- as.integer(rightHand)
covered <- vector('logical', length=length(ds.mat))
covered[1:length(ds.mat)] <- FALSE
defaultClasses <- vector('integer', length=length(rules.sorted))
totalErrors <- vector('integer', length=length(rules.sorted))
.Call("stage3", strongRules, casesCovered, covered, defaultClasses, totalErrors, classDistr, replace, matches, falseMatches, length(levels(rightHand)),  PACKAGE = "arulesCBA")
#save the classifier as only the rules up to the point where we have the lowest total error count
classifier <- rules.sorted[strongRules][1:which.min(totalErrors[strongRules])]
#add a default class to the classifier (the default class from the last rule included in the classifier)
defaultClass <- levels(rightHand)[defaultClasses[strongRules][[which.min(totalErrors[strongRules])]]]
classifier <- list(classifier, defaultClass)
class(classifier) <- "CBA"
return(classifier)
}
classifier2 <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
CBA <- function(data, class, support = 0.2, confidence = 0.8, verbose=FALSE){
####Preparing data####
if(!is(data, "transactions")){
ds.mat <- as(data, "transactions")
} else { ds.mat <- data }
info <- itemInfo(ds.mat)
classNames <- info[info$variables == class,'labels']
rows <- as.integer(rownames(info[info$variables == class,]))
rightHand <- vector('character', length(ds.mat))
for (i in 1:length(classNames)){
rightHand[ds.mat@data[rows[i],]] <- classNames[i]
}
rightHand <- factor(rightHand)
#Generate and sort association rules
rules <- apriori(ds.mat, parameter = list(minlen = 2, supp = support, conf = confidence), appearance = list(rhs=levels(rightHand), default = "lhs"), control=list(verbose=FALSE))
rules.sorted <- sort(rules, by=c("confidence", "support", "lift"))
#Prune association rule set to remove redundant rules
# subset.matrix <- is.subset(rules.sorted, rules.sorted)
# subset.matrix[lower.tri(subset.matrix, diag = TRUE)] <- NA
# redundant <- colSums(subset.matrix, na.rm = TRUE) >= 1
# rules.sorted <- rules.sorted[!redundant]
#Vector used to identify rules as being 'strong' rules for the final classifier
strongRules <- vector('logical', length=length(rules.sorted))
rulesMatchLHS <- is.subset(rules.sorted@lhs, ds.mat, sparse = TRUE)
rulesMatchRHS <- is.subset(rules.sorted@rhs, ds.mat, sparse = TRUE)
return(rulesMatchLHS)
#matrix of rules and records which constitute correct and false matches
matches <- rulesMatchLHS & rulesMatchRHS
falseMatches <- rulesMatchLHS & !rulesMatchRHS
#matrix of rules and classification factor to identify how many times the rule correctly identifies the class
casesCovered <- vector('integer', length=length(rules.sorted))
strongRules <- vector('logical', length=length(rules.sorted))
a <- .Call("stage1", length(ds.mat), strongRules, casesCovered, matches, falseMatches, length(rules.sorted), PACKAGE = "arulesCBA")
replace <- .Call("stage2", a, casesCovered, matches, strongRules,  PACKAGE = "arulesCBA")
#initializing variables for stage 3
ruleErrors <- 0
classDistr <- as.integer(rightHand)
covered <- vector('logical', length=length(ds.mat))
covered[1:length(ds.mat)] <- FALSE
defaultClasses <- vector('integer', length=length(rules.sorted))
totalErrors <- vector('integer', length=length(rules.sorted))
.Call("stage3", strongRules, casesCovered, covered, defaultClasses, totalErrors, classDistr, replace, matches, falseMatches, length(levels(rightHand)),  PACKAGE = "arulesCBA")
#save the classifier as only the rules up to the point where we have the lowest total error count
classifier <- rules.sorted[strongRules][1:which.min(totalErrors[strongRules])]
#add a default class to the classifier (the default class from the last rule included in the classifier)
defaultClass <- levels(rightHand)[defaultClasses[strongRules][[which.min(totalErrors[strongRules])]]]
classifier <- list(classifier, defaultClass)
class(classifier) <- "CBA"
return(classifier)
}
classifier2 <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
classifier2
table(classifier2)
inspect(classifier2)
as.data.frame(classifier2)
print(classifier2)
CBA <- function(data, class, support = 0.2, confidence = 0.8, verbose=FALSE){
####Preparing data####
if(!is(data, "transactions")){
ds.mat <- as(data, "transactions")
} else { ds.mat <- data }
info <- itemInfo(ds.mat)
classNames <- info[info$variables == class,'labels']
rows <- as.integer(rownames(info[info$variables == class,]))
rightHand <- vector('character', length(ds.mat))
for (i in 1:length(classNames)){
rightHand[ds.mat@data[rows[i],]] <- classNames[i]
}
rightHand <- factor(rightHand)
#Generate and sort association rules
rules <- apriori(ds.mat, parameter = list(minlen = 2, supp = support, conf = confidence), appearance = list(rhs=levels(rightHand), default = "lhs"), control=list(verbose=FALSE))
rules.sorted <- sort(rules, by=c("confidence", "support", "lift"))
#Prune association rule set to remove redundant rules
# subset.matrix <- is.subset(rules.sorted, rules.sorted)
# subset.matrix[lower.tri(subset.matrix, diag = TRUE)] <- NA
# redundant <- colSums(subset.matrix, na.rm = TRUE) >= 1
# rules.sorted <- rules.sorted[!redundant]
#Vector used to identify rules as being 'strong' rules for the final classifier
strongRules <- vector('logical', length=length(rules.sorted))
rulesMatchLHS <- is.subset(rules.sorted@lhs, ds.mat)
rulesMatchRHS <- is.subset(rules.sorted@rhs, ds.mat)
#matrix of rules and records which constitute correct and false matches
matches <- rulesMatchLHS & rulesMatchRHS
falseMatches <- rulesMatchLHS & !rulesMatchRHS
#matrix of rules and classification factor to identify how many times the rule correctly identifies the class
casesCovered <- vector('integer', length=length(rules.sorted))
strongRules <- vector('logical', length=length(rules.sorted))
a <- .Call("stage1", length(ds.mat), strongRules, casesCovered, matches, falseMatches, length(rules.sorted), PACKAGE = "arulesCBA")
replace <- .Call("stage2", a, casesCovered, matches, strongRules,  PACKAGE = "arulesCBA")
#initializing variables for stage 3
ruleErrors <- 0
classDistr <- as.integer(rightHand)
covered <- vector('logical', length=length(ds.mat))
covered[1:length(ds.mat)] <- FALSE
defaultClasses <- vector('integer', length=length(rules.sorted))
totalErrors <- vector('integer', length=length(rules.sorted))
.Call("stage3", strongRules, casesCovered, covered, defaultClasses, totalErrors, classDistr, replace, matches, falseMatches, length(levels(rightHand)),  PACKAGE = "arulesCBA")
#save the classifier as only the rules up to the point where we have the lowest total error count
classifier <- rules.sorted[strongRules][1:which.min(totalErrors[strongRules])]
#add a default class to the classifier (the default class from the last rule included in the classifier)
defaultClass <- levels(rightHand)[defaultClasses[strongRules][[which.min(totalErrors[strongRules])]]]
classifier <- list(classifier, defaultClass)
class(classifier) <- "CBA"
return(classifier)
}
data(iris)
library(arules)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
library(arulesCBA)
install.packages("nlme",repos="http://cran.r-project.org")
rm(list = ls())
data(iris)
library(arules)
library(caret)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
results <- predict(classifier, as(toPredict, 'transactions'))
confusionMatrix(results, irisDisc$Species)
data(iris)
library(arules)
library(caret)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
results <- predict(classifier, as(toPredict, 'transactions'))
confusionMatrix(results, irisDisc$Species)
warnings()
data(iris)
library(arules)
library(caret)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
results <- predict(classifier, as(toPredict, 'transactions'))
confusionMatrix(results, irisDisc$Species)
warnings()
data(iris)
library(arules)
library(caret)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
results <- predict(classifier, as(toPredict, 'transactions'))
confusionMatrix(results, irisDisc$Species)
data(iris)
library(arules)
library(caret)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
results <- predict(classifier, as(toPredict, 'transactions'))
data(iris)
library(arules)
library(caret)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
results <- predict(classifier, as(toPredict, 'transactions'))
confusionMatrix(results, irisDisc$Species)
data(iris)
library(arules)
library(caret)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
results <- predict(classifier, as(toPredict, 'transactions'))
data(iris)
library(arules)
library(caret)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
results <- predict(classifier, as(toPredict, 'transactions'))
confusionMatrix(results, irisDisc$Species)
data(iris)
library(arules)
library(caret)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
data(iris)
library(arules)
library(caret)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
results <- predict(classifier, as(toPredict, 'transactions'))
confusionMatrix(results, irisDisc$Species)
data(iris)
colnames(iris)
?install.github
library(ggplot)
library(arulesCBA)
irisDisc <- as.data.frame(lapply(iris[1:4], function(x) discretize(x, categories=9)))
toPredict <- irisDisc[,1:4]
irisDisc$Species <- iris$Species
classifier <- CBA(irisDisc, "Species", supp = 0.05, conf=0.9)
results <- predict(classifier, as(toPredict, 'transactions'))
confusionMatrix(results, irisDisc$Species)
library(caret)
confusionMatrix(results, irisDisc$Species)
earn = 7.6
inflate = 3.22
net = (100+earn)/(100+inflate)
years = 1:50
capital = 600000
value = capital*(net)^years
plot(years, value)
value[50]
for(i in 1:50)
{}
for(i in 1:50){
}
values[1] = 600000
value[1] = 600000
for(i in 2:50){}
for(i in 2:50){
value[i] = (value[i-1] + 20000) * net
}
plot(years, value)
value[20]
value[30]
for(i in 2:50){
value[i] = (value[i-1] + 40000) * net
}
plot(years, value)
value[20]
value[30]
rm(list = ls())
To install the most recent development version, use:
element_counts = 10^[1:7]
element_counts = 10^1:7
element_counts = 10^(1:7)
times = [6e-6]
times <- [6e-6]
times <- [6e-6, 1]
times <- c(6e-6, , 7e-6)
times <- c(6e-6, 7e-6)
times <- c(6e-6, 7e-6, 6.8e-5, .000671, .005682, .473287, 4.59055)
plot(element_counts, times)
plot(element_counts, times, log='xy')
lm(element_counts ~ times)
abline(lm(element_counts ~ times))
abline(lm(element_counts ~ times))
plot(lm(element_counts ~ times))
element_counts <- 10^(1:7)
times <- c(6e-6, 7e-6, 6.8e-5, .000671, .005682, .473287, 4.59055)
plot(element_counts, times, log='xy')
abline(lm(element_counts ~ times))
plot(element_counts, times, log='xy')
abline(lm(element_counts ~ times))
plot(lm(element_counts ~ times))
abline(lm(element_counts ~ times))
plot(element_counts, times)
abline(lm(element_counts ~ times))
plot(element_counts, times)
abline(lm(times ~ element_counts))
plot(element_counts, times, log='xy')
abline(lm(times ~ element_counts))
plot(element_counts, times, log='xy')
abline(lm(times ~ element_counts), log='xy')
abline(lm(times ~ element_counts), untf=TRUE)
plot(element_counts, times, log='xy')
plot(element_counts, times, log='xy')
abline(lm(times ~ element_counts), untf=TRUE)
plot(element_counts, times, log='xy')
abline(lm(log10(times) ~ log10(element_counts)))
plot(element_counts, times, log='xy', color='red')
abline(lm(log10(times) ~ log10(element_counts)), color='blue')
plot(element_counts, times, log='xy', col='red')
abline(lm(log10(times) ~ log10(element_counts)), col='blue')
plot(element_counts, times, log='xy', col='red', ylab = "Time (Seconds)", xlab = "Number of Elements", main="Runtime for LinkedList Insertions (Front)")
abline(lm(log10(times) ~ log10(element_counts)), col='blue')
lm(times ~ element_counts)
1e5 * 4.598e-7 - 5.445e-3
element_counts <- 10^(1:7)
times <- c(6e-6, 7e-6, 6.8e-5, .000671, .005682, .049618, .473287, 4.59055)
plot(element_counts, times, log='xy', col='red', ylab = "Time (Seconds)", xlab = "Number of Elements", main="Runtime for LinkedList Insertions (Front)")
element_counts <- 10^(1:7)
times <- c(6e-6, 7e-6, 6.8e-5, .000671, .005682, .049618, .473287)
plot(element_counts, times, log='xy', col='red', ylab = "Time (Seconds)", xlab = "Number of Elements", main="Runtime for LinkedList Insertions (Front)")
abline(lm(log10(times) ~ log10(element_counts)), col='blue')
lm(times ~ element_counts)
%Good resources for looking up how to do stuff:
element_counts <- 10^(1:5)
times <- c(2e-5, 1.5e-5, .001469, 0.143582, 14.3166)#, 1497.48)
plot(element_counts, times, col='red', ylab = "Time (Seconds)",
xlab = "Number of Elements", main="Runtime for LinkedList Insertions (Front)")
abline(lm(times ~ element_counts), col='blue')
lm(log10(times) ~ log10(element_counts))
element_counts <- 10^(1:5)
times <- c(2e-5, 1.5e-5, .001469, 0.143582, 14.3166, 1497.48)
lm(log10(times) ~ log10(element_counts))
lm(log10(times) ~ log10(element_counts))
element_counts <- 10^(1:6)
times <- c(2e-5, 1.5e-5, .001469, 0.143582, 14.3166, 1497.48)
lm(log10(times) ~ log10(element_counts))
When there is only 1 remaining list, that list will be the combined, sorted list built from all original lists
install.packages("arulesCBA")
require(arulesCBA)
x <- c(3, 12, 6, -5, 0, 8, 15, 1, -10, 7)
data.mode(x)
mode(x)
storage.mode(x)
x[seq(2, 10, by=2)] <- x[seq(2, 10, by=2)] + 5
sum(x)
mean(x)
reverse(x)
??reverse
x <- rev(x)
neg <- x < 0
x <- x[~neg]
x <- x[!neg]
len(x)
length(x)
rm(x)
rm(c(x, neg))
rm(list = (x, neg))
rm(x, neg)
x <- c(3, 12, 6, -5, 0, 8, 15, 1, -10, 7)
neg <- x < 0
rm(x, neg)
strs <- paste("CSE", 1:100)
strs <- paste("CSE", 8000:8100)
x <- c(3, 12, 6, -5, 0, 8, 15, 1, -10, 7)
storage.mode(x)
x <- x - c(0,5)
rm(list = ls())
the.data <- read.csv("../data/timesData.csv")
the.data <- read.csv("data/timesData.csv")
@
<<>>=
the.data <- read.csv("data/timesData.csv")
the.data <- read.csv("timesData.csv")
setwd('~/Dropbox/Fall 2016/7331 - Data Mining/Project1/data/')
the.data <- read.csv("timesData.csv")
View(the.data)
\item \textbf{year}: the year that this ranking occurred.
sha.data <- read.csv('~/Dropbox/Fall 2016/7331 - Data Mining/Project1/data/shanghaiData.csv')
cwu <- read.csv('~/Dropbox/Fall 2016/7331 - Data Mining/Project1/data/cwurData.csv')
cwu.data <- read.csv('~/Dropbox/Fall 2016/7331 - Data Mining/Project1/data/cwurData.csv')
View(cwu)
View(cwu)
att.data <- read.csv('~/Dropbox/Fall 2016/7331 - Data Mining/Project1/data/educational_attainment_supplementary_data.csv')
exp.data <- read.csv('~/Dropbox/Fall 2016/7331 - Data Mining/Project1/data/education_expenditure_supplementary_data.csv')
rm(cwu)
head(the.data)
table(the.data$world_rank)
table(the.data$university_name)
